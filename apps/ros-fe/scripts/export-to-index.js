const fs = require('fs');
const path = require('path');
const colors = require('colors');
const ROOT_DIR = process.cwd();

function getDefaultIncludesNames() {
  return [
    '.module',
    '.model',
    '.service',
    '.component',
    '.interceptor',
    '.value',
  ]
}

function getDefaultExcludesNames() {
  return [
    '.spec.ts',
    'src/app/app'
  ]
}

function getDefaultExt() {
  return '.ts';
}

function walk({
  dir,
  includesNames = [],
  excludesNames = [],
  ext = ''
}) {
  let results = [];

  fs.readdirSync(dir).forEach(file => {
    file = dir + '/' + file;
    let stat = fs.statSync(file);
    if (stat && stat.isDirectory()) {
      results = results.concat(walk({
        dir: file,
        includesNames,
        excludesNames,
        ext
      }));
    } else {
      if (
        (!ext || file.lastIndexOf(ext) + ext.length === file.length) &&
        (!includesNames.length || includesNames.some(name => file.includes(name))) &&
        (!excludesNames.length || !excludesNames.some(name => file.includes(name)))
      ) {
        results.push(file);
      }

    }
  });

  return results;
}

function exportToIndex({
  indexDir = '.',
  srcDir = './src',
  includesNames = getDefaultIncludesNames(),
  excludesNames = getDefaultExcludesNames(),
  ext = getDefaultExt()
} = {}) {

  if (!indexDir.includes(ROOT_DIR)) {
    indexDir = path.join(ROOT_DIR, indexDir);
  }

  if (!srcDir.includes(ROOT_DIR)) {
    srcDir = path.join(ROOT_DIR, srcDir);
  }

  if (!fs.existsSync(srcDir)) {
    throw new Error(`'${srcDir}' directory is not found`);
  }

  console.log('srcDir: ', srcDir);

  const files = walk({
    dir: srcDir,
    includesNames,
    excludesNames,
    ext
  });

  const result = `/* Autogenerated with "scripts/export-to-index.js" */\n\n` +
    files
      .map(file => file.replace(indexDir, '.').replace(/\.(ts|js)$/i, ''))
      .map(file => `export * from '${file}';`)
      .join('\n') + '\n';


  const indexFilePath = path.join(indexDir, 'index.ts');

  console.log(colors.magenta(`The file '${indexFilePath.replace(ROOT_DIR, '.')}' will be written with the following content: \n`));
  console.log(colors.grey(result));

  fs.writeFileSync(indexFilePath, result);
}

module.exports = {
  getDefaultIncludesNames,
  getDefaultExcludesNames,
  getDefaultExt,
  exportToIndex,
  walk
};


const fs = require('fs');
const path = require('path');
const colors = require('colors');
const ROOT_DIR = path.join(__dirname, '..');

function init() {
  const files = walk({
    dir: path.join(ROOT_DIR, 'src'),
    includesNames: [
      '.module',
      '.model',
      '.service',
      '.component',
      '.interceptor'
    ],
    excludesNames: [
      '.spec.ts',
      'src/app/app',
    ],
    ext: '.ts'
  });

  const result = '/* Autogenerated with `export-to-index.js` */\n' +
    files
      .map(file => file.replace(ROOT_DIR, '.').replace(/\.ts$/i, ''))
      .map(file => `export * from '${file}';`)
      .join('\n') + '\n';

  console.log(colors.magenta('The file `./index.ts` will be written with the following content: \n'));
  console.log(colors.grey(result));

  fs.writeFileSync(path.join(ROOT_DIR, 'index.ts'), result);
}

function walk({
  dir,
  includesNames = [],
  excludesNames = [],
  ext = ''
}) {
  let results = [];

  fs.readdirSync(dir).forEach(file => {
    file = dir + '/' + file;
    let stat = fs.statSync(file);
    if (stat && stat.isDirectory()) {
      results = results.concat(walk({
        dir: file,
        includesNames,
        excludesNames,
        ext
      }));
    } else {
      if (
        (!ext || file.lastIndexOf('.ts') + ext.length === file.length) &&
        (!includesNames.length || includesNames.some(name => file.includes(name))) &&
        (!excludesNames.length || !excludesNames.some(name => file.includes(name)))
      ) {
        results.push(file);
      }

    }
  });

  return results;
}

init();

